# CODE CHALLENGE: C++ FUNCTIONS
-------------------------------

* How It Works
--------------
Roll up your sleeves and get yourself in the mood for functions, because it’s code challenge time!

Say what? Here’s how it works:

	. Each exercise in this lesson has a C++ function for you to build.

	. Each challenge has many solutions and we encourage you to be creative.

	. We don’t care what goes on in the function as long as it works the way it should. (Notice those tests in main() for each function.)

As a refresher, C++ function syntax looks like this:

return_type function_name(paramater1, parameter2) {
 
   // Code block here
 
   return output_if_there_is_any;
 
}

For example, with real code this might look like:

bool is_even(int number) {
 
  if (number % 2 == 0) {
 
    return true;
 
  }
 
  return false;
 
}

Best of luck!

==================================================================================================================================================================

* Introduction
--------------
introduction()

Instructions
1.
Write a function introduction() with no return value that has:

	. std::string parameter named first_name.

	. std::string parameter named last_name.

The function should print the last_name, followed by a comma, a space, first_name another space, and finally last_name again.

For example, introduction("James", "Bond"); should print the following:

Bond, James Bond

main.cpp
--------
#include <iostream>

// Define introduction() here:
void introduction(std::string first_name, std::string last_name) {
  std::cout << last_name << ", " << first_name << " " << last_name;
}

int main() {
  
  introduction("Beyonce", "Knowles");
  
}

==================================================================================================================================================================

* Average
---------
average()

Instructions
1.
Write a function average() that takes:

	. A double parameter named num1.

	. A double parameter named num2.

The function should return a double that is the average of the arguments passed in.

main.cpp
--------
#include <iostream>

// Define average() here:
double average(double num1, double num2) {
  return (num1 + num2) / 2;
}

int main() {
  
  std::cout << average(42.0, 24.0) << "\n";
  std::cout << average(1.0, 2.0) << "\n";
  
}

==================================================================================================================================================================

* Tenth Power
-------------
tenth_power()

Instructions
1.
Write a function named tenth_power() that has:

An int parameter named num.
The function should return num raised to the 10th power.

main.cpp
--------
#include <iostream>
#include <cmath>

// Define tenth_power() here:
int tenth_power(int num) {
  return pow(num, 10);
}

int main() {
  
  std::cout << tenth_power(0) << "\n";
  std::cout << tenth_power(1) << "\n";
  std::cout << tenth_power(2) << "\n";
  
}

==================================================================================================================================================================

* First Three Multiples
-----------------------
first_three_multiples()

Instructions
1.
Write a function named first_three_multiples() that has:

	. An int parameter named num.

The function should return an std::vector of the first three multiples of num in ascending order.

For example, first_three_multiples(7) should return a vector with 7, 14, and 21.

main.cpp
--------
#include <iostream>
#include <vector>

// Define first_three_multiples() here:
std::vector<int> first_three_multiples(int num) {
  std::vector<int> result;
  result.push_back(num*1);
  result.push_back(num*2);
  result.push_back(num*30);
  return result;
}

int main() {
  
  for (int element : first_three_multiples(8)) {
    std::cout << element << "\n";
  }
  
}

==================================================================================================================================================================

* Water Plant
-------------
needs_water()

Instructions
1.
Define a function needs_water() that accepts:

	. First argument: An int number of days since the previous watering.

	. Second argument: A bool value is_succulent. (A value of true would indicate that the plant is a succulent.)

Inside the function, you’ll need some conditional logic:

	. If is_succulent is false and days is greater than 3, return "Time to water the plant.".

	. If is_succulent is true and days is 12 or less, return "Don't water the plant!".

	. If is_succulent is true and days is greater than or equal to 13, return "Go ahead and give the plant a little water.".
	
	. Otherwise, return "Don't water the plant!".

	Note: Don’t print the strings; return them from the function.


main.cpp
--------
#include <iostream>

// Define needs_water() here:
std::string needs_water(int days, bool is_succulent) {
  if (is_succulent == false && days > 3) {
    return "Time to water the plant.";
  }
  else if (is_succulent == true && days <= 12) {
    return "Don't water the plant!";
  }
  else if (is_succulent == true && days >= 13) {
    return "Go ahead and give the plant a little water.";
  }
  else {
    return "Don't water the plant!";
  }
}

int main() {
  
  std::cout << needs_water(10, false) << "\n";
  
}

==================================================================================================================================================================





















































