# FUNCTIONS: SCOPE & FLEXIBILITY
--------------------------------

* The Scope of Things
---------------------
Take a look at the program below. We have a void function named favorite_animal() and main() with a few statements inside.

#include <iostream>
 
std::string sea_animal = "manatee";
 
void favorite_animal(std::string best_animal) {
 
  std::string animal = best_animal;
  std::cout << "Best animal: " << animal << "\n";
 
}
 
int main() {
 
  favorite_animal("jaguar");
 
  std::cout << sea_animal << "\n";
  std::cout << animal << "\n";
 
}

When this program is compiled and executed, sea_animal will print, but animal won’t. Why do you think that’s the case?

Scope is the region of code that can access or view a given element.

	. Variables defined in global scope are accessible throughout the program.

	. Variables defined in a function have local scope and are only accessible inside the function.

sea_animal was defined in global scope at the top of the program, outside of main(). So sea_animal is defined everywhere in the program.

Because animal was only defined within favorite_animal() and not returned, it is not accessible to the rest of the program.

main.cpp
--------
#include <iostream>

void enter_code(int passcode) {

  std::string secret_knowledge = "https://content.codecademy.com/courses/regex/onyourexcitingjourneylearningtocodeyouwillfindthis.gif";
  
  if (passcode == 0310) {
    
    std::cout << secret_knowledge << "\n";
    
  } else {
    
    std::cout << "Sorry, incorrect!\n";
    
  }
}

int main() {
    
  enter_code(0310);
  
}

==================================================================================================================================================================

* Multi-File Programs
---------------------
Programs can grow quickly. With a few functions, you can declare the function above main() and then you can define the function below main() like this:

#include <iostream>
 
// Declaration at the top:
void eat();
 
int main() {
 
  eat();
 
}
 
// Definition at the bottom:
void eat() {
 
  std::cout << "nom nom nom\n";
 
}

But this isn’t ideal when your code gets longer; it’s common to use the same function in more than one .cpp file.

To make your code cleaner and more modular, you can move the function definitions over to another specialized .cpp file (e.g., my_functions.cpp), leaving a list of declarations above 
main().

But files, like functions, have scope. So, how does the main() program know about the function definitions?

Before your program even compiles, it links together any files you list in your compilation statement into a single executable:

g++ main.cpp my_functions.cpp

And voila! Your program knows the function definitions.

main.cpp
--------
#include <iostream>
#include <cmath>

// Add declarations here:
double average(double num1, double num2);
int tenth_power(int num);
bool is_palindrome(std::string text);

int main() {
  
  std::cout << is_palindrome("racecar") << "\n";
  std::cout << tenth_power(3) << "\n";
  std::cout << average(8.0, 19.0) << "\n";
  
}

my_functions.cpp
----------------
#include <iostream>
#include <cmath>

// Add definitions here:
double average(double num1, double num2) {
  return (num1 + num2) / 2;
}

int tenth_power(int num) {
  return pow(num, 10);
}

bool is_palindrome(std::string text) {
  std::string reversed_text = "";
  
  for (int i = text.size() - 1; i >= 0; i--) {
    reversed_text += text[i];
  }
  
  if (reversed_text == text) {
    return true;
  }
  
  return false;
}

==================================================================================================================================================================































































